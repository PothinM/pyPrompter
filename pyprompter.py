#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import xml.etree.ElementTree as ET
from datetime import datetime

# Check and install dependencies if needed
try:
    import pyperclip
except ImportError:
    print("Installing pyperclip...")
    os.system(f"{sys.executable} -m pip install pyperclip")
    import pyperclip

def display_ascii_art():
    """Display the program's ASCII art"""
    ascii_art = """
    ╔════════════════════════════════════════════════════╗
    ║   ___      ___                      _              ║
    ║  | _ \_  _| _ \_ _ ___ _ __  _ __ | |_ ___ _ _     ║
    ║  |  _/ || |  _/ '_/ _ \ '  \| '_ \|  _/ -_) '_|    ║
    ║  |_|  \_, |_| |_| \___/_|_|_| .__/ \__\___|_|      ║
    ║       |__/                   |_|                   ║
    ║                                                    ║
    ║        AI Prompt Generator Tool by @mathpow        ║
    ╚════════════════════════════════════════════════════╝
    """
    print(ascii_art)

def ask_questions():
    """Ask questions to the user and return the answers"""
    questions = [
        ("Role", "What is the AI's role?"),
        ("Context", "What is the context?"),
        ("Objectives", "What are the objectives?"),
        ("Methodology", "What methodology should be followed?"),
        ("Avoid", "What should be avoided?"),
        ("Output Format", "What output format is expected?"),
        ("Constraints", "Are there any specific constraints?"),
        ("Examples", "Do you have any examples to provide?")
    ]
    
    answers = {}
    
    print("\n📝 Please answer the following questions (press Enter to skip):\n")
    
    for key, question in questions:
        answer = input(f"➤ {question}: ").strip()
        if answer:
            answers[key] = answer
    
    return answers

def generate_prompt(answers):
    """Generate a structured prompt from the answers"""
    prompt_parts = []
    
    # Introduction
    if "Role" in answers:
        prompt_parts.append(f"You are {answers['Role']}.")
    
    # Context
    if "Context" in answers:
        prompt_parts.append(f"\nContext: {answers['Context']}")
    
    # Objectives
    if "Objectives" in answers:
        prompt_parts.append(f"\nObjectives:\n{answers['Objectives']}")
    
    # Methodology
    if "Methodology" in answers:
        prompt_parts.append(f"\nMethodology to follow:\n{answers['Methodology']}")
    
    # Constraints
    if "Avoid" in answers:
        prompt_parts.append(f"\nThings to avoid:\n{answers['Avoid']}")
    
    if "Constraints" in answers:
        prompt_parts.append(f"\nConstraints:\n{answers['Constraints']}")
    
    # Output format
    if "Output Format" in answers:
        prompt_parts.append(f"\nExpected output format:\n{answers['Output Format']}")
    
    # Examples
    if "Examples" in answers:
        prompt_parts.append(f"\nExamples:\n{answers['Examples']}")
    
    return "\n".join(prompt_parts)

def save_xml(prompt, answers):
    """Save the prompt in XML format"""
    root = ET.Element("prompt")
    root.set("date", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
    
    # Add elements
    for key, value in answers.items():
        element = ET.SubElement(root, key.replace(" ", "_"))
        element.text = value
    
    # Add complete prompt
    prompt_element = ET.SubElement(root, "complete_prompt")
    prompt_element.text = prompt
    
    # Create tree and save
    tree = ET.ElementTree(root)
    ET.indent(tree, space="  ")
    
    filename = f"prompt_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xml"
    tree.write(filename, encoding="utf-8", xml_declaration=True)
    
    return filename

def save_text(prompt):
    """Save the prompt in text format"""
    filename = f"prompt_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    
    with open(filename, "w", encoding="utf-8") as f:
        f.write("PROMPT GENERATED BY PYPROMPTER\n")
        f.write("=" * 50 + "\n")
        f.write(f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write("=" * 50 + "\n\n")
        f.write(prompt)
    
    return filename

def save_markdown(prompt, answers):
    """Save the prompt in Markdown format"""
    filename = f"prompt_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md"
    
    with open(filename, "w", encoding="utf-8") as f:
        f.write("# Prompt Generated by PyPrompter\n\n")
        f.write(f"**Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
        
        f.write("## Parameters\n\n")
        for key, value in answers.items():
            f.write(f"### {key}\n{value}\n\n")
        
        f.write("## Complete Prompt\n\n")
        f.write("```\n")
        f.write(prompt)
        f.write("\n```\n")
    
    return filename

def display_export_menu(prompt, answers):
    """Display the export menu and handle choices"""
    print("\n" + "=" * 50)
    print("✨ GENERATED PROMPT:")
    print("=" * 50)
    print(prompt)
    print("=" * 50)
    
    while True:
        print("\n📤 Export options:")
        print("1. Copy to clipboard")
        print("2. Save as XML")
        print("3. Save as text (.txt)")
        print("4. Save as Markdown (.md)")
        print("5. Do all (1-4)")
        print("0. Quit (or press Enter)")
        
        choice = input("\nYour choice: ").strip()
        
        if choice == "0" or choice == "":
            print("\n👋 Goodbye!")
            break
        elif choice == "1":
            try:
                pyperclip.copy(prompt)
                print("✅ Prompt copied to clipboard!")
            except Exception as e:
                print(f"❌ Error copying to clipboard: {e}")
        elif choice == "2":
            filename = save_xml(prompt, answers)
            print(f"✅ Saved to: {filename}")
        elif choice == "3":
            filename = save_text(prompt)
            print(f"✅ Saved to: {filename}")
        elif choice == "4":
            filename = save_markdown(prompt, answers)
            print(f"✅ Saved to: {filename}")
        elif choice == "5":
            # Do everything
            try:
                pyperclip.copy(prompt)
                print("✅ Prompt copied to clipboard!")
            except Exception as e:
                print(f"❌ Error copying to clipboard: {e}")
            
            xml_file = save_xml(prompt, answers)
            txt_file = save_text(prompt)
            md_file = save_markdown(prompt, answers)
            
            print(f"✅ Files saved:")
            print(f"   - XML: {xml_file}")
            print(f"   - TXT: {txt_file}")
            print(f"   - MD:  {md_file}")
        else:
            print("❌ Invalid choice, please try again.")

def main():
    """Main function"""
    try:
        # Clear screen (cross-platform)
        os.system('cls' if os.name == 'nt' else 'clear')
        
        # Display ASCII art
        display_ascii_art()
        
        # Ask questions
        answers = ask_questions()
        
        if not answers:
            print("\n❌ No answers provided. Exiting program.")
            return
        
        # Generate prompt
        prompt = generate_prompt(answers)
        
        # Display export menu
        display_export_menu(prompt, answers)
        
    except KeyboardInterrupt:
        print("\n\n❌ Program interrupted by user.")
    except Exception as e:
        print(f"\n❌ An error occurred: {e}")

if __name__ == "__main__":
    main() 